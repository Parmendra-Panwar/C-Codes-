<<<<<<< HEAD
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        /*int n = nums.size();
        for(int i=0; i<n; i++){
            if(nums[i]>=target){
                return i;
            }
        }        return n;*/
        int low = 0, high = nums.size(), mid;
        if(target > nums[high-1]){
            return high;
        }
        while(low<=high){
            mid = (low+high)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(target<nums[mid]){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;
    }
=======
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        /*int n = nums.size();
        for(int i=0; i<n; i++){
            if(nums[i]>=target){
                return i;
            }
        }        return n;*/
        int low = 0, high = nums.size(), mid;
        if(target > nums[high-1]){
            return high;
        }
        while(low<=high){
            mid = (low+high)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(target<nums[mid]){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;
    }
>>>>>>> 5ae85b68d0f1ff0c9f4d7fa65a2129faa18e729d
};